1) Find the duplicate characters in the string
Input: abccdddefghh
Output: c,d,h

2) Find duplicates in integer array
Input: [2, 1, 3, 1, 3, 1, 4 ]
Output: [1,3]

3) Given an array of integers, a lucky integer is an integer which has a frequency in the array equal to its value.

Return a lucky integer in the array. If there are multiple lucky integers return the largest of them. If there is no lucky integer return -1.

Input: [1,2,3,3,4,4,4,4,5]
Output: 4
Explanation: 1, 2 and 4 are all lucky numbers, but 4 is the largest

4) Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. 
In other words, one of the first string's permutations is the substring of the second string.

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False

5) Given 2 Strings with length n and (n+1) respectively. 
The second String contains all the characters of first but with an extra char. Write the code to find the extra char

Example 1:
Input:
A1 = "Test"
A2 = "Test$"
Output: '$'

Example 2:
Input:
A1 = "Hello"
A2 = "lloreH"
Output: 'r'

6) Write a program that tells all the words containing same letters(anagram)
Input  : "Stale are there in tesla and you can steal the pears"
Output : [Stale, tesla, steal]

7) Find all subarrays in the given integer array whose sum matching target
Input: [1, 7, 4, 3, 4, 1, 2, 5, 1]
Target: 7
Output: [[1,1], [2,3], [3,4], [4,6], [6,7]]

8) Find any substring in input string is anagram of the target string
Input: acbbabccaabcab
Target: abc
Output: true

9) Find unique characters in string
Input: Testleaf
Output: [s,l,a,f]

10) Remove vowels from given string
Input: Testleaf
Output: Tstlf

11) Find second least repeating character in the string
Input: paypal
Output: y or l

12) Longest substring without repeating characters

Input: s="abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3

Input: s="bbbbb"
Output: 1
Explanation: The aswer is "b", with the length of 1

Input: s="pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3

Notice that the answer must be a substring, "pwke" is a subsequence not a substring.

13) Find the largest substring with k distinct characters
Input: eceba
k=2
Output: ece

14) A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).
Write a function to determine if a number is strobogrammatic. The number is represented as a string.
For example, the numbers "69", "88", and "818" are all strobogrammatic.

15) Find if s1 is anagram of s2
s1=anagram
s2=nagaram
Output: true

16) Given the integer array, return index of 2 digits whose sum matches the k
Input: [2, 1, 3, 4]
k=5
Output: [[0, 2], [1, 3]]

17) Given a string which contains same set of alphabets in both upper and lower case, swap the alphabets to get the alphabets of both the cases to appear together. Retain the order of first occurrence of any alphabet.
e.g.: 
Input: BdAcbCaD
Output: BbdDAacC

18) Find the second least character in a given string
  Example:
  Input: "tesla-service" Output: s 
     a) If there are more than one match, return the last match "aabbccc" -> 'b'
     b) If there are no second match, return ''
	 
19) Find most frequent element in array
Input: 4521542101 Output: 1 is repeated 3 times
Input: 1234234 Output: 2,3,4 are repeated 2 times

20) Given an array of positive integers, find the minimum length ascending subsequence such that after removing this subsequence from the array, the remaining array contains only unique integers. Only one subsequence will have the minimum length (no ties). If there is no such subsequence, return [-1].

Example
n = 7
arr = [2, 1, 3, 1, 4, 1, 3]
After removing the subsequence [1, 1, 3], the remaining array of distinct integers is [2, 3, 4, 1]. The subsequence [1, 1, 3] is the shortest ascending subsequence with this property, so it is returned.

Sample Case 0
Sample Input For Custom Testing
STDIN Function
----- --------
4 → arr[] size n = 4
1 → arr[] = [1, 1, 1, 3]
1
1
3
Sample Output
1
1
Explanation
The input array is [1, 1, 1, 3]. After removing the subsequence [1, 1], the remaining array is [1, 3] which contains only unique integers. There is no shorter subsequence with that property.

Sample Case 1
Sample Input For Custom Testing
STDIN Function
----- --------
5 → arr[] size n = 5
3 → arr[] = [3, 2, 2, 1, 1]
2
2
1
1
Sample Output
-1
Explanation
The input array is [3, 2, 2, 1, 1]. The example does not contain any ascending subsequence such that after removing it, the array contains only unique integers.

21) Find uncommon characters of 2 strings
s1=amazon
s2=india
Output: [z, m, o, d, i]

22) Given a string comprised of lowercase letters in the range ascii[a-z], find the length shortest substring that contains at least one of each of the letters in the string.

Example
givenString = dabbcabcd
The list of all characters in the string is [a, b, c, d]. Two of the substrings that contain all letters are dabbc and abcd. The shortest substring that contains all of the letters is 4 characters long. Return 4 as the answer.

23) For a given array of transactions, group all of the transactions by item name. Return an array of strings where each string contains the item name followed by a space and the number of associated transactions.
Note: Sort the array descending by transaction count, then ascending alphabetically by item name for items with matching transaction counts.

Example
transactions = ['notebook', 'notebook', 'mouse', 'keyboard', 'mouse']
There are two items with 2 transactions each: 'notebook' and 'mouse'. In alphabetical order, they are 'mouse', 'notebook'. There is one item with 1 transaction: 'keyboard'. The return array, sorted as required, is ['mouse 2', 'notebook 2', 'keyboard 1'].

Sample Case 0
Sample Input
STDIN Function
----- -----
4 → transactions[] size n = 4
bin → transactions = ['bin', 'can', 'bin', 'bin']
can
bin
bin
Sample Output
bin 3
can 1
Explanation
There is one item 'bin' with 3 transactions. There is one item 'can' with 1 transaction. The return array sorted descending by transaction count, then ascending by name is ['bin 3', 'can 1'].

Sample Case 1
Sample Input
STDIN Function
----- -----
3 → transactions[] size n = 3
banana → transactions = ['banana', 'pear', 'apple']
pear
apple
Sample Output
apple 1
banana 1
pear 1

Explanation
There is one item 'apple' with 1 transaction. There is one item 'banana' with 1 transaction. There is one item 'pear' with 1 transaction. The return array sorted descending by transaction count, then ascending by name is ['apple 1', 'banana 1', 'pear 1'].

24) Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] 
and the absolute difference between i and j is at most k.
Example 1:
Input: nums = [1,2,3,1], k = 3
Output: true
Example 2:
Input: nums = [1,0,1,1], k = 1
Output: true
Example 3:
Input: nums = [1,2,3,1,2,3], k = 2
Output: false
Example 3:
Input: nums = [1,2,3,2,2,3], k = 2
Output: true
Hint: Window Sliding+Hashing

25) Given a pattern and a string s, find if s follows the same pattern.
Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.
Example 1:
Input: pattern = "abba", s = "dog cat cat dog"
Output: true
Example 2:
Input: pattern = "abba", s = "dog cat cat fish"
Output: false
Input: pattern = "abc", s = "hello world world"
Output: false
Algorithm: HashMap 

26) Given a string s that consists of only upper case letters, you can perform at most k operations on that string.
In one operation, you can choose any character of the string and change it to any other upper case character.
Find the length of the longest sub-string containing all repeating letters you can get after performing the above operations.
Example 1:
Input:
s = "ABAB", k = 2
Output:
4
Explanation:
Replace the two 'A's with two 'B's or vice versa.
Example 2:
Input:
s = "AABABBA", k = 1
Output:
4
Explanation:
Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.

27) Given a string s and an integer k.
Return the maximum number of vowel letters [exact first match] in any substring of s with length k.
Vowel letters in English are (a, e, i, o, u).
Example 1:
Input: s = "abciiidef", k = 3
Output: iii
Explanation: The substring "iii" contains 3 vowel letters.
Example 2:
Input: s = "aeiou", k = 2
Output: ae

28) Given 2 strings, find all the start indices of second string anagrams in first string.
Note:
Strings consists of lowercase letters only 
The order of output does not matter.
Input:
s: "abab" p: "ab"
Output:
[0, 1, 2]
Input:
s: "testetr" p: "te"
Output:
[0, 3, 4]
Sliding Window + HashMap 

//from week 12
29) 